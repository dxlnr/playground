import os
import subprocess
import platform
import sysconfig
import numpy as np

arch = platform.system()

# ENVIRONMENT
env = Environment(
  ENV={"PATH": os.environ["PATH"]},
  CC='clang',
  CXX='clang++',
  tools=["default", "cython"],
  CXXFLAGS=['-std=c++17'],
  CPPPATH=[],
)
env["CCFLAGS"] = ["-g", "-fPIC", "-O2", "-Wunused", "-Werror", "-Wshadow"]

# COMMUNICATION
cpppath = [
    "#msgq/cc",
    "#msgq/cc/vision",
    '/usr/include/',
    '/usr/lib/include',
]
ccflags = []
ldflags = []

msgq_env = env.Clone()
msgq_env["CCFLAGS"] = ["-g", "-fPIC", "-O2", "-Wunused", "-Werror", "-Wshadow", "-Wno-vla-extension"] + ccflags
msgq_env["LDFLAGS"] = ldflags
msgq_env["LINKFLAGS"] = ldflags
msgq_env["CFLAGS"] = "-std=gnu11"
msgq_env["CXXFLAGS"] = "-std=c++1z"
msgq_env["CPPPATH"] = cpppath
msgq_env["CYTHONCFILESUFFIX"] = ".cpp"

# CYTHON
python_include = sysconfig.get_path('include')
python_lib = sysconfig.get_config_var('LIBDIR')
python_version = sysconfig.get_config_var('VERSION')  # E.g., '3.12'

envCython = msgq_env.Clone(LIBS=[])
envCython["CPPPATH"] += [
    python_include,
    np.get_include(),
]
envCython["CCFLAGS"] += ["-Wno-#warnings", "-Wno-shadow", "-Wno-deprecated-declarations"]
envCython["CCFLAGS"].remove('-Werror')
envCython["LINKFLAGS"] = ["-pthread", "-shared"]

# QT
QT_VERSION = 6

def get_qt_path(query):
    return subprocess.check_output([f'qmake{QT_VERSION}', '-query', f'{query}'], encoding='utf8').strip()

qt_env = Environment(
    ENV={"PATH": os.environ["PATH"]},
    CXXFLAGS=['-std=c++17'],
    CC='clang',
    CXX='clang++',
    LINKFLAGS=[],
    CFLAGS=[],
    LIBPATH=[],
)
cpppath = [
    '/usr/lib/include',
]
qt_env["CPPPATH"] = cpppath

qt_modules = ["Widgets", "Gui", "Core", "OpenGL", "OpenGLWidgets"]
qt_libs = [f"Qt{QT_VERSION}{m}" for m in qt_modules]
qt_libs += ["GL"]

qt_install_headers = get_qt_path('QT_INSTALL_HEADERS')
qt_env['QTDIR'] = get_qt_path('QT_INSTALL_PREFIX')
qt_libexec_path = get_qt_path('QT_INSTALL_LIBEXECS')

qt_gui_path = os.path.join(qt_install_headers, "QtGui")
qt_gui_dirs = [d for d in os.listdir(qt_gui_path) if os.path.isdir(os.path.join(qt_gui_path, d))]
qt_dirs = [f"{qt_install_headers}"]
qt_dirs += [f"{qt_install_headers}/QtGui/{qt_gui_dirs[0]}/QtGui", ] if qt_gui_dirs else []
qt_dirs += [f"{qt_install_headers}/Qt{m}" for m in qt_modules]

qt_env.Tool('qt6')
qt_env['CPPPATH'] += qt_dirs
qt_env['LIBS'] = qt_libs
qt_env['LIBPATH'] = ['usr/lib']
qt_env['QT_MOC'] = f"{qt_libexec_path}/moc"

Export('qt_env', 'msgq_env', 'envCython')

# run
SConscript(['msgq/SConscript', 'qt/SConscript'])
